var _buy = JSON.parse($("#buyOrders").val());
var _sell = JSON.parse($("#sellOrders").val());
function market(fromSym, toSym, symbol, hash, commission, bTo, bFrom,version, usdBid, usdAsk, vefRate, penRate, buySpread, sellSpread) {
    var color = "#212529";
    var colorInverse = "#fff";
    if (version === "light") {
        color = "#fff";
        colorInverse = "#212529";
    }
    //TradingView.onready(function () {
    //    var widget = window.tvWidget = new TradingView.widget(
    //        {
    //            fullscreen: false,
    //            autosize: true,
    //            loading_screen: { backgroundColor: colorInverse, foregroundColor:colorInverse },
    //            symbol: symbol,
    //            disabled_features: ["header_symbol_search", "display_market_status"],
    //            enabled_features: ["keep_left_toolbar_visible_on_small_screens"],
    //            interval: '30',
    //            container_id: "tv_chart_container",
    //            //	BEWARE: no trailing slash is expected in feed URL
    //            datafeed: new Datafeeds.UDFCompatibleDatafeed("/chartservice", 1000 * 30),
    //            library_path: "../charting_library/",
    //            locale: getParameterByName('lang') || "en",
    //            drawings_access: { type: 'black', tools: [{ name: "Regression Trend" }] },
    //            charts_storage_api_version: "1.5",
    //            client_id: 'tradingview.com',
    //            user_id: 'public_user_id',
    //            type: "black",
    //            toolbar_bg: color,
    //            overrides: {
    //                "paneProperties.background": color,
    //                "paneProperties.vertGridProperties.color":color,
    //                "paneProperties.horzGridProperties.color": color,
    //                "scalesProperties.lineColor": colorInverse,
    //                "scalesProperties.textColor": colorInverse,
    //            },
    //            settings_adapter: { initialSettings: { "paneProperties.background": color, "scalesProperties.backgroundColor": color }, setValue: function (key, value) { }, removeValue: function (key) { } },
    //        });

    //    widget.onChartReady(function () {

    //    });
    //});
    //$.get("/Market/_getPendingOrders", { symbol }, function (data) {
    //    for (var i = 0; i < data.length; i++) {
    //        addOrderLine(data[i]);
    //    }

    //});

    ///////////////////

    ////////////////HUB//////////////

    //#region updatemarket
    function convertTofloat(value) {
        return parseFloat(value.replace(",", ""));
    }
    var _marketObj = {};
    var rate = $.connection.rateHub;
    rate.client.updateMarket = function (data) {
        var prices = data.Summary;
        var json = JSON.parse(prices);
        _marketObj = json;
        for (var i = 0; i < json.length; i++) {
            ///////////////////////////////////////
            if (json[i].MarketName.split('-')[0] === "VEF" || json[i].MarketName.split('-')[0] === "CLP") {
                var mBid = $("#" + json[i].MarketName + "Bid").text();
                var bidValue = parseFloat(json[i].Bid).toFixed(0);
                if (mBid === json[i].Bid) {
                    $("#" + json[i].MarketName + "Bid").removeClass("text-success");
                    $("#" + json[i].MarketName + "Bid").removeClass("text-danger");
                }
                else if (mBid > json[i].Bid) {
                    $("#" + json[i].MarketName + "Bid").addClass("text-success").text(bidValue).removeClass("text-danger");
                }
                else if (mBid < json[i].Bid) {
                    $("#" + json[i].MarketName + "Bid").addClass("text-danger").text(bidValue).removeClass("text-success");

                } else {
                    $("#" + json[i].MarketName + "Bid").addClass("text-success").text(bidValue).removeClass("text-danger");

                }

                var mAsk = $("#" + json[i].MarketName + "Ask").text();
                if (mAsk === json[i].Ask) {
                    $("#" + json[i].MarketName + "Ask").removeClass("text-success");
                    $("#" + json[i].MarketName + "Ask").removeClass("text-danger");
                }
                else if (mAsk > json[i].Ask) {
                    $("#" + json[i].MarketName + "Ask").addClass("text-success").text(parseFloat(json[i].Ask).toFixed(0)).removeClass("text-danger");
                }
                else if (mAsk < json[i].Ask) {
                    $("#" + json[i].MarketName + "Ask").addClass("text-danger").text(parseFloat(json[i].Ask).toFixed(0)).removeClass("text-success");

                } else {
                    $("#" + json[i].MarketName + "Ask").addClass("text-success").text(parseFloat(json[i].Ask).toFixed(0)).removeClass("text-danger");

                }

                ///////////////////////////////////////////////////////////
                var market = symbol;
                if (json[i].MarketName === market) {
                    window.ActualBid = json[i].ActualBid;
                    window.ActualAsk = json[i].ActualAsk;
                    ///////////////BID////////////
                    //var bid = $("#bid").text();
                    //if (bid == json[i].Bid) {
                    //    $("#bid").removeClass("green");
                    //    $("#bid").removeClass("red");
                    //}
                    //else if (bid > json[i].Bid) {
                    //    $("#bid").addClass("green").text(parseFloat(json[i].Bid).toFixed(0)).removeClass("red");
                    //}
                    //else if (bid < json[i].Bid) {
                    //    $("#bid").addClass("red").text(parseFloat(json[i].Bid).toFixed(0)).removeClass("green");

                    //} else {
                    //    $("#bid").addClass("green").text(parseFloat(json[i].Bid).toFixed(0)).removeClass("red");
                    //}
                    ////////////////END BID/////////////

                    ///////////////ASK////////////
                    //var Ask = $("#ask").text();
                    //if (Ask == json[i].Ask) {
                    //    $("#ask").removeClass("green");
                    //    $("#ask").removeClass("red");
                    //}
                    //if (Ask > json[i].Ask) {
                    //    $("#ask").addClass("green").text(json[i].Ask).removeClass("red");
                    //}
                    //if (Ask < json[i].Ask) {
                    //    $("#ask").addClass("red").text(json[i].Ask).removeClass("green");

                    //}
                    ////////////////END ASK/////////////

                    ///////////////Last////////////
                    var Last = $("#last").text();
                    if (Last === json[i].Last) {
                        $("#last").removeClass("green");
                        $("#last").removeClass("red");
                    }
                    if (Last > json[i].Last) {
                        $("#last").addClass("green").text(parseFloat(json[i].Last).toFixed(0)).removeClass("red");
                    }
                    if (Last < json[i].Last) {
                        $("#last").addClass("red").text(parseFloat(json[i].Last).toFixed(0)).removeClass("green");

                    }

                    ////////////////END Last/////////////
                    //////////////// LAST1///////////////
                    var Last = $("#last1").text();
                    if (Last === json[i].Last) {
                        $("#last1").removeClass("green");
                        $("#last1").removeClass("red");
                    }
                    if (Last > json[i].Last) {
                        $("#last1").addClass("green").text(parseFloat(json[i].Last).toFixed(0)).removeClass("red");
                    }
                    if (Last < json[i].Last) {
                        $("#last1").addClass("red").text(parseFloat(json[i].Last).toFixed(0)).removeClass("green");

                    }




                    ///////////////Volume////////////
                    var Volume = $("#vol").text();
                    if (Volume === json[i].Volume) {
                        $("#vol").removeClass("green");
                        $("#vol").removeClass("red");
                    }
                    if (Volume > json[i].Volume) {
                        $("#vol").addClass("green").text(parseFloat(json[i].Volume).toFixed(0)).removeClass("red");
                    }
                    if (Volume < json[i].Volume) {
                        $("#vol").addClass("red").text(parseFloat(json[i].Volume).toFixed(0)).removeClass("green");

                    }
                    ////////////////END Volume/////////////

                    ///////////////High////////////
                    var High = $("#high").text();
                    if (High === json[i].High) {
                        $("#high").removeClass("green");
                        $("#high").removeClass("red");
                    }
                    if (High > json[i].High) {
                        $("#high").addClass("green").text(parseFloat(json[i].High).toFixed(0)).removeClass("red");
                    }
                    if (High < json[i].High) {
                        $("#high").addClass("red").text(parseFloat(json[i].High).toFixed(0)).removeClass("green");

                    }
                    ////////////////END High/////////////

                    ///////////////Low////////////
                    var Low = $("#low").text();
                    if (Low == json[i].Low) {
                        $("#low").removeClass("green");
                        $("#low").removeClass("red");
                    }
                    if (Low > json[i].Low) {
                        $("#low").addClass("green").text(parseFloat(json[i].Low).toFixed(0)).removeClass("red");
                    }
                    if (Low < json[i].Low) {
                        $("#low").addClass("red").text(parseFloat(json[i].Low).toFixed(0)).removeClass("green");

                    }
                    ////////////////END Low/////////////
                }
            }
            else {
                var mBid = $("#" + json[i].MarketName + "Bid").text();
                if (mBid === json[i].Bid) {
                    $("#" + json[i].MarketName + "Bid").removeClass("text-success");
                    $("#" + json[i].MarketName + "Bid").removeClass("text-danger");
                }
                else if (mBid > json[i].Bid) {
                    $("#" + json[i].MarketName + "Bid").addClass("text-success").text(json[i].Bid).removeClass("text-danger");
                }
                else if (mBid < json[i].Bid) {
                    $("#" + json[i].MarketName + "Bid").addClass("text-danger").text(json[i].Bid).removeClass("text-success");

                } else {
                    $("#" + json[i].MarketName + "Bid").addClass("text-success").text(json[i].Bid).removeClass("text-danger");

                }

                var mAsk = $("#" + json[i].MarketName + "Ask").text();
                if (mAsk === json[i].Ask) {
                    $("#" + json[i].MarketName + "Ask").removeClass("text-success");
                    $("#" + json[i].MarketName + "Ask").removeClass("text-danger");
                }
                else if (mAsk > json[i].Ask) {
                    $("#" + json[i].MarketName + "Ask").addClass("text-success").text(json[i].Ask).removeClass("text-danger");
                }
                else if (mAsk < json[i].Ask) {
                    $("#" + json[i].MarketName + "Ask").addClass("text-danger").text(json[i].Ask).removeClass("text-success");

                } else {
                    $("#" + json[i].MarketName + "Ask").addClass("text-success").text(json[i].Ask).removeClass("text-danger");

                }

                ///////////////////////////////////////////////////////////
                var market = symbol;
                if (json[i].MarketName === market) {
                    window.ActualBid = json[i].ActualBid;
                    window.ActualAsk = json[i].ActualAsk;
                    ///////////////BID////////////
                    //var bid = $("#bid").text();
                    //if (bid == json[i].Bid) {
                    //    $("#bid").removeClass("green");
                    //    $("#bid").removeClass("red");
                    //}
                    //else if (bid > json[i].Bid) {
                    //    $("#bid").addClass("green").text(json[i].Bid).removeClass("red");
                    //}
                    //else if (bid < json[i].Bid) {
                    //    $("#bid").addClass("red").text(json[i].Bid).removeClass("green");

                    //} else {
                    //    $("#bid").addClass("green").text(json[i].Bid).removeClass("red");
                    //}
                    ////////////////END BID/////////////

                    ///////////////ASK////////////
                    //var Ask = $("#ask").text();
                    //if (Ask == json[i].Ask) {
                    //    $("#ask").removeClass("green");
                    //    $("#ask").removeClass("red");
                    //}
                    //if (Ask > json[i].Ask) {
                    //    $("#ask").addClass("green").text(json[i].Ask).removeClass("red");
                    //}
                    //if (Ask < json[i].Ask) {
                    //    $("#ask").addClass("red").text(json[i].Ask).removeClass("green");

                    //}
                    ////////////////END ASK/////////////

                    ///////////////Last////////////
                    var Last = $("#last").text();
                    if (Last === json[i].Last) {
                        $("#last").removeClass("green");
                        $("#last").removeClass("red");
                    }
                    if (Last > json[i].Last) {
                        $("#last").addClass("green").text(json[i].Last).removeClass("red");
                    }
                    if (Last < json[i].Last) {
                        $("#last").addClass("red").text(json[i].Last).removeClass("green");

                    }

                    ////////////////END Last/////////////
                    //////////////// LAST1///////////////
                    var Last = $("#last1").text();
                    if (Last === json[i].Last) {
                        $("#last1").removeClass("green");
                        $("#last1").removeClass("red");
                    }
                    if (Last > json[i].Last) {
                        $("#last1").addClass("green").text(json[i].Last).removeClass("red");
                    }
                    if (Last < json[i].Last) {
                        $("#last1").addClass("red").text(json[i].Last).removeClass("green");

                    }




                    ///////////////Volume////////////
                    var Volume = $("#vol").text();
                    if (Volume === json[i].Volume) {
                        $("#vol").removeClass("green");
                        $("#vol").removeClass("red");
                    }
                    if (Volume > json[i].Volume) {
                        $("#vol").addClass("green").text(json[i].Volume).removeClass("red");
                    }
                    if (Volume < json[i].Volume) {
                        $("#vol").addClass("red").text(json[i].Volume).removeClass("green");

                    }
                    ////////////////END Volume/////////////

                    ///////////////High////////////
                    var High = $("#high").text();
                    if (High === json[i].High) {
                        $("#high").removeClass("green");
                        $("#high").removeClass("red");
                    }
                    if (High > json[i].High) {
                        $("#high").addClass("green").text(json[i].High).removeClass("red");
                    }
                    if (High < json[i].High) {
                        $("#high").addClass("red").text(json[i].High).removeClass("green");

                    }
                    ////////////////END High/////////////

                    ///////////////Low////////////
                    var Low = $("#low").text();
                    if (Low === json[i].Low) {
                        $("#low").removeClass("green");
                        $("#low").removeClass("red");
                    }
                    if (Low > json[i].Low) {
                        $("#low").addClass("green").text(json[i].Low).removeClass("red");
                    }
                    if (Low < json[i].Low) {
                        $("#low").addClass("red").text(json[i].Low).removeClass("green");

                    }
                    ////////////////END Low/////////////
                }

            }
        }
    }
    /////////////
    //// COMPLETED LIMIT ORDER
    /////////////////
    var hashCode = hash;

    rate.client.orderCompleted = function (h, i, s) {
        if (hashCode === h && s === symbol) {
            getPendingOrders();
            updateBalance();
            //window["ORD" + i].remove();
            toastr["success"]("Order has been completed successfully.");
        }
    };
    function IsPairedWithUSD(sym) {
        for (var s = 0; s < _marketObj.length; s++) {
            if (_marketObj[s].MarketName === "USD-" + sym) {
                return true;
            }
        }
        return false;
    }
    function IsPairedWithBTC(sym) {
        for (var s = 0; s < _marketObj.length; s++) {
            if (_marketObj[s].MarketName === "BTC-" + sym) {
                return true;
            }
        }
        return false;
    }
    function BestAsk(Symbol) {
        for (var s = 0; s < _marketObj.length; s++) {
            if (_marketObj[s].MarketName === Symbol) {
                return _marketObj[s].ActualAsk;
            }
        }
        return null;
    }
    function findOrder(price, quantity, orderType) {
        if (orderType === "buy") {
            if (_buy.length > 0) {
                for (var i = 0; i < _buy.length; i++) {
                    if (parseFloat(buySpread) === 0.000) {
                        if (price === _buy[i].Price) return true;
                    } else {
                        if (price === _buy[i].Price && quantity === _buy[i].Quantity) return true;
                    }
                }
            }
        } else if (orderType === "sell") {
            if (_sell.length > 0) {
                for (var i = 0; i < _sell.length; i++) {
                    if (parseFloat(sellSpread) === 0.000) {
                        if (price === _sell[i].Price) return true;
                    } else {
                        if (price === _sell[i].Price && quantity === _sell[i].Quantity) return true;
                    }
                }
            }
        }
        return false;
    }
    //#endregion
    var buyOrders = {}; var sellOrders = {};
    rate.client.updateHistory = function (data) {
        var html = "";
        var buy = "";
        var sell = "";
        var buyhistory = JSON.parse(data.buy);
        buyOrders = buyhistory;
        var li = buyhistory.length - 1;
        if (li > 10) {
            li = 10;
        }
        for (var i = li; i >= 0; i--) {
            ///////////
            // html += "<tr style'background: rgba(1, 152, 87, 0.60);font-size:small'>";
            //  html += "<td class='text-success'>" + buyhistory[i].Price + "</td><td>" + buyhistory[i].Quantity + "</td><td style='pull-right;text-align:right'>" + buyhistory[i].Total + "</td></tr>";
            if (fromSym === "CLP" || fromSym === "VEF") {
                buy += "<tr class='sellOrderbook' quan='" + buyhistory[i].Quantity + "' price='" + parseInt(buyhistory[i].Rate) + "'  style='font-size:small;cursor:pointer !important'>";
                var sum = parseInt(buyhistory[i].Rate * buyhistory[i].Quantity);
                var temp = findOrder(parseInt(buyhistory[i].Rate), buyhistory[i].Quantity, 'sell');
                if (temp === true) {
                    buy += "<td style='background-color:#226147;' class='text-danger'>" + parseInt(buyhistory[i].Rate).toLocaleString() + "</td><td style='background-color:#226147;'>" + buyhistory[i].Quantity + "</td><td style='pull-right;text-align:right;background-color:#226147;'>" + sum.toLocaleString() + "</td></tr>";
                }
                else {
                    buy += "<td class='text-danger'>" + parseInt(buyhistory[i].Rate).toLocaleString() + "</td><td>" + buyhistory[i].Quantity + "</td><td style='pull-right;text-align:right'>" + sum.toLocaleString() + "</td></tr>";
                }
            } else {
                buy += "<tr class='sellOrderbook' quan='" + buyhistory[i].Quantity + "' price='" + buyhistory[i].Rate + "'  style='font-size:small;cursor:pointer !important'>";
                var sum = parseFloat(buyhistory[i].Rate * buyhistory[i].Quantity).toFixed(6);
                var temp = findOrder(buyhistory[i].Rate, buyhistory[i].Quantity, 'sell');
                if (temp === true) {
                    buy += "<td style='background-color:#226147;' class='text-danger'>" + buyhistory[i].Rate + "</td><td style='background-color:#226147;'>" + buyhistory[i].Quantity + "</td><td style='pull-right;text-align:right;background-color:#226147;'>" + sum + "</td></tr>";
                } else {
                    buy += "<td class='text-danger'>" + buyhistory[i].Rate + "</td><td>" + buyhistory[i].Quantity + "</td><td style='pull-right;text-align:right'>" + sum + "</td></tr>";
                }

            }
        }
        if (fromSym == "CLP" || fromSym == "VEF") {
            $("#ask").text(parseInt(buyhistory[0].Rate));
            var Ask = $("#ask").text();
            if (Ask === parseInt(buyhistory[0].Rate)) {
                $("#ask").removeClass("green");
                $("#ask").removeClass("red");
            }
            if (Ask > parseInt(buyhistory[0].Rate)) {
                $("#ask").addClass("green").text(parseInt(buyhistory[0].Rate)).removeClass("red");
            }
            if (Ask < parseInt(buyhistory[0].Rate)) {
                $("#ask").addClass("red").text(parseInt(buyhistory[0].Rate)).removeClass("green");
            }
        }
        else {
            $("#ask").text(buyhistory[0].Rate);
            var Ask = $("#ask").text();
            if (Ask === buyhistory[0].Rate) {
                $("#ask").removeClass("green");
                $("#ask").removeClass("red");
            }
            if (Ask > buyhistory[0].Rate) {
                $("#ask").addClass("green").text(buyhistory[0].Rate).removeClass("red");
            }
            if (Ask < buyhistory[0].Rate) {
                $("#ask").addClass("red").text(buyhistory[0].Rate).removeClass("green");
            }
        }
        var history = JSON.parse(data.summary);
        for (var i = 0; i < history.length; i++) {///////////
            var date = new Date(history[i].TimeStamp);
            if (fromSym === "CLP") {
                if (history[i].OrderType == "BUY") {
                    html += "<tr><td >" + date.toLocaleTimeString() + "</td><td class='text-success'>" + history[i].PriceString + "</td><td>" + history[i].Quantity + "</td></tr>";

                } else {

                    html += "<tr><td >" + date.toLocaleTimeString() + "</td><td class='text-danger'>" + history[i].PriceString + "</td><td>" + history[i].Quantity + "</td></tr>";
                }
            }
            else if (fromSym === "VEF") {
                if (history[i].OrderType == "BUY") {
                    html += "<tr><td >" + date.toLocaleTimeString() + "</td><td class='text-success'>" + parseInt(history[i].Price * vefRate).toLocaleString() + "</td><td>" + history[i].Quantity + "</td></tr>";

                } else {

                    html += "<tr><td >" + date.toLocaleTimeString() + "</td><td class='text-danger'>" + parseInt(history[i].Price * vefRate).toLocaleString() + "</td><td>" + history[i].Quantity + "</td></tr>";
                }
            }
            else if (fromSym === "PEN") {
                if (history[i].OrderType == "BUY") {
                    html += "<tr><td >" + date.toLocaleTimeString() + "</td><td class='text-success'>" + (history[i].Price * penRate).toFixed(4) + "</td><td>" + history[i].Quantity + "</td></tr>";

                } else {

                    html += "<tr><td >" + date.toLocaleTimeString() + "</td><td class='text-danger'>" + (history[i].Price * penRate).toFixed(4) + "</td><td>" + history[i].Quantity + "</td></tr>";
                }
            }
            else {
                if (history[i].OrderType == "BUY") {
                    html += "<tr><td >" + date.toLocaleTimeString() + "</td><td class='text-success'>" + history[i].Price + "</td><td>" + history[i].Quantity + "</td></tr>";

                } else {

                    html += "<tr><td >" + date.toLocaleTimeString() + "</td><td class='text-danger'>" + history[i].Price + "</td><td>" + history[i].Quantity + "</td></tr>";
                }
            }

        }
        var sellhistory = JSON.parse(data.sell);
        sellOrders = sellhistory;
        li = sellhistory.length - 1;
        if (li > 10) {
            li = 10;
        }
        for (var i = 0; i <= li; i++) {///////////
            //   html += "<tr style'background: rgba(1, 152, 87, 0.60);font-size:small'>";
            //    html += "<td class='text-danger'>" + sellhistory[i].Price + "</td><td>" + sellhistory[i].Quantity + "</td><td style='pull-right;text-align:right'>" + sellhistory[i].Total + "</td></tr>";
            if (fromSym === "CLP" || fromSym === "VEF") {
                sell += "<tr class='buyOrderbook' quan='" + sellhistory[i].Quantity + "' price='" + parseInt(sellhistory[i].Rate) + "' style='font-size:small;cursor:pointer'>";
                var sum = parseInt(sellhistory[i].Rate * sellhistory[i].Quantity);
                var temp = findOrder(parseInt(sellhistory[i].Rate), sellhistory[i].Quantity, 'buy');
                if (temp === true) {
                    sell += "<td style='background-color:green;' class='text-success'>" + parseInt(sellhistory[i].Rate).toLocaleString() + "</td><td style='background-color:green;'>" + sellhistory[i].Quantity + "</td><td style='pull-right;text-align:right;background-color:green'>" + sum.toLocaleString() + "</td></tr>";
                } else {
                    sell += "<td class='text-success'>" + parseInt(sellhistory[i].Rate).toLocaleString() + "</td><td>" + sellhistory[i].Quantity + "</td><td style='pull-right;text-align:right'>" + sum.toLocaleString() + "</td></tr>";
                }

            } else {
                sell += "<tr class='buyOrderbook' quan='" + sellhistory[i].Quantity + "' price='" + sellhistory[i].Rate + "' style='font-size:small;cursor:pointer'>";
                var sum = parseFloat(sellhistory[i].Rate * sellhistory[i].Quantity).toFixed(6);
                var temp = findOrder(sellhistory[i].Rate, sellhistory[i].Quantity, 'buy');
                if (temp === true) {
                    sell += "<td style='background-color:green;' class='text-success'>" + sellhistory[i].Rate + "</td><td style='background-color:green;'>" + sellhistory[i].Quantity + "</td><td style='pull-right;text-align:right;background-color:green'>" + sum + "</td></tr>";
                } else {
                    sell += "<td class='text-success'>" + sellhistory[i].Rate + "</td><td>" + sellhistory[i].Quantity + "</td><td style='pull-right;text-align:right'>" + sum + "</td></tr>";
                }

            }
        }
        if (fromSym == "CLP" || fromSym == "VEF") {
            $("#bid").text(parseInt(sellhistory[0].Rate));
            var bid = $("#bid").text();
            if (bid === parseInt(sellhistory[0].Rate)) {
                $("#bid").removeClass("green");
                $("#bid").removeClass("red");
            }
            else if (bid > parseInt(sellhistory[0].Rate)) {
                $("#bid").addClass("green").text(parseInt(sellhistory[0].Rate)).removeClass("red");
            }
            else if (bid < parseInt(sellhistory[0].Rate)) {
                $("#bid").addClass("red").text(parseInt(sellhistory[0].Rate)).removeClass("green");

            } else {
                $("#bid").addClass("green").text(parseInt(sellhistory[0].Rate)).removeClass("red");
            }
        }
        else {
            $("#bid").text(sellhistory[0].Rate);
            var bid = $("#bid").text();
            if (bid === sellhistory[0].Rate) {
                $("#bid").removeClass("green");
                $("#bid").removeClass("red");
            }
            else if (bid > sellhistory[0].Rate) {
                $("#bid").addClass("green").text(sellhistory[0].Rate).removeClass("red");
            }
            else if (bid < sellhistory[0].Rate) {
                $("#bid").addClass("red").text(sellhistory[0].Rate).removeClass("green");

            } else {
                $("#bid").addClass("green").text(sellhistory[0].Rate).removeClass("red");
            }
        }

        $("#buyob").html(buy);
        $("#sellob").html(sell);

        $("#mh").html(html);

    }
    $(document).on("click", ".buyOrderbook", function () {
        var quan = $(this).attr("quan");
        $("#sellFrom").val(quan).keyup();
        var price = $(this).attr("price");
        $("#priceToSell,#priceToBuy").val(price);
        var fv = "≈ " + (price * usdAsk) + " USD";
        $(".usdFromLS").val(fv);
    })
    $(document).on("click", ".sellOrderbook", function () {
        var quan = $(this).attr("quan");
        $("#buyTo").val(quan).keyup();
        var price = $(this).attr("price");
        $("#priceToBuy,#priceToSell").val(price);
        var fv = "≈ " + (price * usdBid) + " USD";
        $(".usdFromLB").val(fv);
    })
    $.connection.hub.start().done(function () {
        rate.server.start(symbol);
    });

    //////////////END HUB///////////////
    /////////////Find Best Possible Price for Market Orders/////////////////
    function FindAskPriceAgainstAmount(amount) {
        for (var s = 0; s <= buyOrders.length - 1; s++) {
            if (buyOrders[s].Quantity >= parseFloat(amount)) {
                return buyOrders[s].Rate;
            }
        }
        return window.ActualAsk;
    }
    function FindBidPriceAgainstAmount(amount) {
        for (var s = 0; s < sellOrders.length - 1; s++) {
            if (sellOrders[s].Quantity >= parseFloat(amount)) {
                return sellOrders[s].Rate;
            }
        }
        return window.ActualBid;
    }
    //////////// BUY AND SELL///////////////
    $("#buy-price-sec,#sell-price-sec").hide();
    $("#buyOrder").change(function () {
        var value = $(this).val();
        if (value === 1) {
            $("#buy-price-sec").hide();
        } else {
            var price = parseFloat($("#ask").text());
            $("#priceToBuy").val(price);
            $("#buy-price-sec").show();
            var fv = "≈ " + (price * usdBid) + " USD";
            $(".usdFromLB").val(fv);
        }
    });
    $("#sellOrder").change(function () {
        var value = $(this).val();
        if (value === 1) {
            $("#sell-price-sec").hide();
        } else {
            var price = parseFloat($("#bid").text());
            $("#priceToSell").val(price);
            $("#sell-price-sec").show();
            var fv = "≈ " + (price * usdAsk) + " USD";
            $(".usdFromLS").val(fv);
        }
    });
    ////////////////////
    //////Handle Buy
    //////////////////////
    var comPercentage = parseFloat(commission);
    window["FROM_BALANCE"] = parseFloat(bFrom);
    window["TO_BALANCE"] = parseFloat(bTo);
    $("#buyTo").keyup(function () {
        var to = $(this).val();
        var fromBal = window["FROM_BALANCE"];
        var orderType = 1;
        //var orderType = $("#buyOrder").val();
        if (orderType === 1) {
            var bid = FindAskPriceAgainstAmount(to);
            var comm = (bid * to) * comPercentage / 100;
            $("#buyFrom").val((bid * to));
            var value = parseFloat(bid * to + comm)
            if (fromBal < value) {
                $(".erLowBalBuy").text("You don't have enough balance for this trade!");
            }
            else {
                $(".erLowBalBuy").text("");
            }
        } else {

            var price = $("#priceToBuy").val();
            var comm = (price * to) * comPercentage / 100;
            $("#buyFrom").val((price * to));
        }
    });
    $("#priceToBuy").keyup(function () {
        var price = $(this).val();
        var from = $("#buyFrom").val();
        var comm = (from / price) * comPercentage / 100;
        $("#buyTo").val((from / price));
        var fv = "≈ " + (price * usdBid) + " USD";
        $(".usdFromLB").val(fv);

    });
    $("#buyFrom").keyup(function () {
        var from = $(this).val();
        var fromBal = window["FROM_BALANCE"];
        var orderType = 1;
        //var orderType = $("#buyOrder").val();
        if (orderType === 1) {
            var bid = $("#ask").text();
            var comm = (from / bid) * comPercentage / 100;
            $("#buyTo").val((from / bid).toFixed(8));
            var value = parseFloat(from);
            if (fromBal < value) {
                $(".erLowBalBuy").text("You don't have enough balance for this trade!");
            }
            else {
                $(".erLowBalBuy").text("");
            }
        } else {

            var price = $("#priceToBuy").val();
            var comm = (from / price) * comPercentage / 100;
            $("#buyTo").val((from / price).toFixed(8));
        }
    });
    $(".sell-item").click(function () {
        var val = $(this).attr("val");
        $("#sellFrom").val(val).change();
    });
    $(".buy-item").click(function () {
        var val = $(this).attr("val");
        $("#buyFrom").val(val).change();
    });

    ////////////////////////////
    ////Handle Sell
    ///////////////////////////

    $("#sellFrom").keyup(function () {
        var from = $(this).val();
        var toBal = window["TO_BALANCE"];
        //var orderType = $("#sellOrder").val();
        var orderType = 1;
        if (orderType === 1) {
            var ask = FindBidPriceAgainstAmount(from);
            var comm = (from * comPercentage / 100);
            $("#sellTo").val((ask * from + comm));
            var value = parseFloat(from);
            if (toBal < value) {
                $(".erLowBalSell").text("You don't have enough balance for this trade!");
            }
            else {
                $(".erLowBalSell").text("");
            }
        } else {
            var price = parseFloat($("#priceToSell").val());
            var comm = ((price * from) * comPercentage / 100);
            $("#sellTo").val((price * from));
        }
    });
    $("#sellTo").keyup(function () {
        var to = $(this).val();
        var toBal = window["TO_BALANCE"];
        //var orderType = $("#sellOrder").val();
        var orderType = 1;
        if (orderType == 1) {
            var ask = parseFloat($("#bid").text());
            var comm = ((to / ask) * comPercentage / 100);
            $("#sellFrom").val((to / ask).toFixed(8));
            var value = parseFloat(to / ask);
            if (toBal < value) {
                $(".erLowBalSell").text("You don't have enough balance for this trade!");
            }
            else {
                $(".erLowBalSell").text("");
            }
        } else {
            var price = parseFloat($("#priceToSell").val());
            var comm = ((to / price) * comPercentage / 100);
            $("#sellFrom").val((to / price).toFixed(8));
        }
    });
    $("#priceToSell").keyup(function () {
        var price = $(this).val();
        var from = $("#sellFrom").val();
        var comm = ((price * from) * comPercentage / 100);
        $("#sellTo").val((price * from));
        var fv = "≈ " + (price * usdAsk) + " USD";
        $(".usdFromLS").val(fv);
    });

    $(".toBuyTab").click(function () {
        $("#buyTo").val(null);
        $("#buyFrom").val(null);
        $(".erLowBalBuy").text("");
    });
    $(".toSellTab").click(function () {
        $("#sellTo").val(null);
        $("#sellFrom").val(null);
        $(".erLowBalSell").text("");
    });
    //var limitBuy = document.querySelector('#priceToBuy');
    //var limitSell = document.querySelector('#priceToSell');
    var amountBuy = document.querySelector('#buyTo');
    var amountSell = document.querySelector('#sellFrom');
    //if (fromSym === "USD" || fromSym === "PEN") {
    //    limitBuy.addEventListener("keyup", function () {
    //        limitBuy.value = limitBuy.value.replace(/(\.\d{3})\d+/g, '$1');
    //    });
    //    limitSell.addEventListener("keyup", function () {
    //        limitSell.value = limitSell.value.replace(/(\.\d{3})\d+/g, '$1');
    //    });
    //} else if (fromSym === "BTC") {
    //    limitBuy.addEventListener("keyup", function () {
    //        limitBuy.value = limitBuy.value.replace(/(\.\d{8})\d+/g, '$1');
    //    });
    //    limitSell.addEventListener("keyup", function () {
    //        limitSell.value = limitSell.value.replace(/(\.\d{8})\d+/g, '$1');
    //    });
    //}
    amountBuy.addEventListener("keyup", function () {
        amountBuy.value = amountBuy.value.replace(/(\.\d{3})\d+/g, '$1');
    });
    amountSell.addEventListener("keyup", function () {
        amountSell.value = amountSell.value.replace(/(\.\d{3})\d+/g, '$1');
    });

    function GetBestRateForQuantity(symbol, quantity, callback) {

        if (symbol != "" && quantity != "") {
            $.ajax({
                type: 'GET',
                async: false,
                url: '@Url.Action("GetRateForQuantity","Dashboard")',
                data: {
                    symbol: symbol,
                    quantity: quantity
                },
                success: function (rateData) {
                    callback(rateData);
                },
                error: function (err) {
                }
            }).done(function (rateData) {
                callback(rateData);
            });
        }
    }
    /////////////Handle Buy and Sell Button
    /////////////////////////////////////////////
    //////////////////
    var bestAsk = 0.0;
    $(".sell-btn").click(function () {
        var flag = true;
        var from = $("#sellFrom").val();
        if (from === "" || from === undefined) {
            toastr["warning"]("Please fill the fields first..!");
            flag = false;
        }
        //var orderType = $("#sellOrder").val();
        if (IsPairedWithUSD(toSym)) {
            GetBestRateForQuantity("USD-" + toSym, amount, function (data) {
                bestAsk = data;
            });
        }
        else if (IsPairedWithBTC(toSym)) {
            GetBestRateForQuantity("BTC-" + toSym, amount, function (data) {
                bestAsk = data;
            });
        }
        var orderType = 1;
        var isLimit = true;
        var price = $("#bid").text();
        var actualBid = FindBidPriceAgainstAmount(from);
        var actualAsk = window.ActualAsk;
        var iBid = $("#bid").text();
        var iAsk = $("#ask").text();
        if (orderType === 1) {
            isLimit = false;
        } else {
            price = $("#priceToSell").val();
            if (price === "" || price === undefined) {
                toastr["warning"]("Please fill the fields first..!");
                flag = false;
            }
        }
        if (flag === true) {
            bootbox.confirm("<h2 style='text-align:center'>NEW ORDER SUMMARY</h2> <br><h4 style='text-align:center'>Currency Selling - " + toSym + "</h4><h4 style='text-align:center'>Amount to Sell - " + from + " " + toSym + "</h4><h4 style='text-align:center'>Rate - " + actualBid + " " + fromSym + "</h4><h4 style='text-align:center'>Order Value ≈ " + (actualBid * from).toFixed(4) + " " + fromSym + "</h4><br><br><p style='text-align:center;color:#000 !important'>This order is placed under iBitt terms of exchange and user consents to processing of data and currencies within this contract.Successfully processed orders will be updated in your account transaction history.</p>", function (ans) {
                if (ans === true) {
                    $.post("/Market/Sell", { from: from, fromSym: fromSym, toSym: toSym, isLimit: isLimit, rate: price, actualBid: actualBid, actualAsk: actualAsk, ibittBid: iBid, ibittAsk: iAsk, bestAsk: bestAsk }, function (response) {
                        if (response.response === "true") {
                            updateBalance();
                            getPendingOrders();
                            //window.tvWidget.chart().refreshMarks();
                            if (isLimit === true) {
                                //addOrderLine(response.order);
                            }
                            toastr["success"]("Sell order has been successfully placed..!");
                            if (isLimit === true) {
                                if (fromSym === "VEF" || fromSym === "CLP") {
                                    _sell.push({ Price: parseInt(price), Quantity: parseFloat(from) });
                                }
                                else {
                                    _sell.push({ Price: parseFloat(price), Quantity: parseFloat(from) });
                                }
                                
                            }
                        } else {
                            toastr["error"](response.msg);
                        }
                    });
                }
            });
        }
    });

    $(".buy-btn").click(function () {
        var flag = true;
        var from = $("#buyTo").val();
        if (from === "" || from === undefined) {
            toastr["warning"]("Please fill the fields first..!");
            flag = false;
        }
        //var orderType = $("#buyOrder").val();
        var orderType = 1;
        var isLimit = true;
        var actualAsk = FindAskPriceAgainstAmount(from);
        if (IsPairedWithUSD(fromSym)) {
            GetBestRateForQuantity("USD-" + fromSym, amount * actualAsk, function (data) {
                bestAsk = data;
            });
        }
        var actualBid = window.ActualBid;
        var iAsk = $("#ask").text();
        var iBid = $("#bid").text();
        var price = $("#ask").text();
        if (orderType === 1) {
            isLimit = false;
        } else {
            price = $("#priceToBuy").val();
            if (price === "" || price === undefined) {
                toastr["warning"]("Please fill the fields first..!");
                flag = false;
            }
        }
        if (flag === true) {
            bootbox.confirm("<h2 style='text-align:center'>NEW ORDER SUMMARY</h2><br><h4 style='text-align:center'>Currency Buying - " + toSym + "</h4><h4 style='text-align:center'>Amount to Buy - " + from + " " + toSym + "</h4><h4 style='text-align:center'>Rate - " + actualAsk + " " + fromSym + "</h4><h4 style='text-align:center'>Order Value ≈ " + (actualAsk * from).toFixed(4) + " " + fromSym + "</h4><br><br><p style='text-align:center;color:#000 !important'>This order is placed under iBitt terms of exchange and user consents to processing of data and currencies within this contract.Successfully processed orders will be updated in your account transaction history.</p>", function (ans) {
                if (ans === true) {

                    $.post("/Market/Buy", { from: from, fromSym: fromSym, toSym: toSym, isLimit: isLimit, rate: price, actualAsk: actualAsk, actualBid: actualBid, ibittAsk: iAsk, ibittBid: iBid, usdAsk: bestAsk }, function (response) {
                        if (response.response === "true") {
                            updateBalance();
                            getPendingOrders();
                            //window.tvWidget.chart().refreshMarks();
                            if (isLimit === true) {
                                //addOrderLine(response.order);
                            }
                            toastr["success"]("Buy order has been successfully placed..!");
                            if (isLimit === true) {
                                if (fromSym === "VEF" || fromSym === "CLP") {
                                    _buy.push({ Price: parseInt(price), Quantity: parseFloat(from) });
                                }
                                else {
                                    _buy.push({ Price: parseFloat(price), Quantity: parseFloat(from) });
                                }
                                
                            }
                        } else {
                            toastr["error"](response.msg);
                        }
                    });
                }
            });
        }


    });
    /////////////////////////
    ///////////HANDLE PERCENTAGE
    ////////////////////////////
    
    $(".sell-percent").click(function () {
        var percent = $(this).attr("percent");
        var sBalance = window["TO_BALANCE"];
        $("#sellFrom").val(sBalance * percent / 100);
        $("#sellFrom").keyup();
    });
    $(".buy-percent").click(function () {
        var percent = $(this).attr("percent");
        var sBalance = window["FROM_BALANCE"];
        $("#buyFrom").val(sBalance * percent / 100);
        $("#buyFrom").keyup();
    });

    function Remove(price, quantity, title) {
        if (title === "BUY") {
            for (var i = 0; i < _buy.length; i++) {
                if (_buy[i].Price === price && _buy[i].Quantity === quantity) {
                    _buy.splice(i, 1);
                }
            }
        } else if (title === "SELL") {
            for (var i = 0; i < _sell.length; i++) {
                if (_sell[i].Price === price && _sell[i].Quantity === quantity) {
                    _sell.splice(i, 1);
                }
            }
        }
    }

    /////////////////////////////////////////
    ////HANDLE CANCEL
    //////////////////////////////////////////

    $(document).on("click", ".cancel", function (e) {
        e.preventDefault();
        var url = $(this).attr("href");
        var id = $(this).attr("order-id");
        var price = $(this).attr("price");
        var quantity = $(this).attr("quantity");
        var quantityBuy = $(this).attr("quantityB");
        bootbox.confirm("Are you sure you want to cancel this order?", function (cancel) {
            if (cancel) {
                $.post(url, function (msg) {
                    getPendingOrders();
                    updateBalance();
                    //window["ORD" + id].remove();
                    toastr["success"]("Order has been cancelled successfully.");
                    Remove(parseFloat(price), parseFloat(quantityBuy), "BUY");
                    Remove(parseFloat(price), parseFloat(quantity), "SELL");
                });
            }
        });
    });
    //////////END BUY AND SELL//////////////////
    //////////UPDATE PENDING ORDERS/////////////
    var getPendingOrders = function () {
        $.get("/Market/_pendingOrders", { symbol }, function (html) {
            $("#po").html(html);
        });
    };

    getPendingOrders();
    ////////////UPDATA BALANCE////////////////
    var updateBalance = function () {
        $.get("/Market/_updateBalance", { symbol: symbol }, function (data) {
            window["FROM_BALANCE"] = data.bFrom;
            window["TO_BALANCE"] = data.bTo;
            $("#b-from").html("Wallet Balance: " + data.bFrom + " " + fromSym);
            $("#b-to").html("Wallet Balance: " + data.bTo + " " + toSym);
        });
    };
    /////////////////////////
    //////// ADD ORDER LINES IN CHART
    ////////////////////////////

    //var addOrderLine = function (data) {

    //    var id = data.id;
    //    window[id] = id;
    //    window["ORD" + id] = window.tvWidget.chart().createOrderLine()


    //        .onCancel(id, function (text) {
    //            bootbox.confirm("Are you sure you want to cancel this order", function (handler) {
    //                if (handler == true) {
    //                    $.post("/Market/_cancel", { orderId: text }, function (res) {
    //                        getPendingOrders();
    //                        updateBalance();
    //                        toastr["success"](res);
    //                        window["ORD" + text].remove();
    //                    });
    //                }
    //            });

    //        })
    //        .setQuantity(data.amount + "")
    //        .setLineLength(5)
    //        .setLineStyle(2);

    //    if (data.type == "SELL") {
    //        window["ORD" + id].setText("SELL: " + data.value);
    //    }
    //    else {
    //        window["ORD" + id].setText("BUY: " + data.value);
    //        window["ORD" + id].setBodyBorderColor("#05b469")
    //            .setBodyTextColor("#05b469")
    //            .setQuantityBorderColor("#05b469")
    //            .setQuantityBackgroundColor("#05b469")
    //            .setCancelButtonBorderColor("#05b469")
    //            .setCancelButtonIconColor("#05b469")
    //            .setLineColor("#05b469");

    //    }
    //    window["ORD" + id].setPrice(data.price);
    //};
}